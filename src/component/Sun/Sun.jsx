/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: SebastianSosnowski (https://sketchfab.com/SebastianSosnowski)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/sun-9ef1c68fbb944147bcfcc891d3912645
title: Sun
*/

import React, { useRef } from "react";
import { useBox } from "@react-three/cannon";
import { useGLTF, useAnimations, Sparkles } from "@react-three/drei";
// import sunCalc from "suncalc";

export default function Model({ ...props }) {
  // const group = useRef();
  const { nodes, materials, animations } = useGLTF("/sun/sun.glb");
  // const { actions } = useAnimations(animations, group);

  // get today's sunlight times for surabaya
  // const times = sunCalc.getTimes(new Date(), -7.25, 112.7688);

  // // format sunrise time from the Date object
  // const sunriseStr = times.sunrise.getHours() + ':' + times.sunrise.getMinutes();

  // const location = sunCalc.getPosition(times.sunrise, -7.25, 112.7688);
  // const location = sunCalc.getPosition(times.sunset, -7.25, 112.7688);
  // const location = sunCalc.getPosition(new Date(), -7.25, 112.7688);

  // const azimuth = (location.azimuth * 180) / Math.PI;
  // const altitude = (location.altitude * 180) / Math.PI;

  // const radius = window.innerWidth / -30;
  // const height = window.innerHeight / 20;
  // const theta = azimuth + 90;
  // const delta = altitude;
  // var apparentRadius = radius * Math.cos((delta * Math.PI) / 180);
  // const position_x = apparentRadius * Math.cos((theta * Math.PI) / 180);
  // const position_y = apparentRadius * Math.sin((theta * Math.PI) / 180) + height;
  // const position_z = radius * Math.sin((delta * Math.PI) / 180);
  // console.log(position_x + " " + position_y + " " + position_z);

  // const position = [-position_x, position_y, position_z];
  const [ref] = useBox((index) => ({
    type: "Static",
    mass: 1,
    args: props.args,
    position: props.position,

    ...props,
  }));

  
  return (
    <group ref={ref} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="3a2aaa22fb3d4b329318a980ad1bf6d1fbx" rotation={[Math.PI / 2, 0, 0]}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="UnstableStarCore" rotation={[-Math.PI / 2, 0, 0]}>
                  <mesh name="UnstableStarCore_1_0" geometry={nodes.UnstableStarCore_1_0.geometry} material={materials.material} />
                  {/* <sphereGeometry args={[0.5, 32, 32]} />
                  <meshStandardMaterial metalness={0.6} roughness={0.2} /> */}
                  <directionalLight args={["#ffffff", 2]} position={props.position} />
                </group>
                <group name="UnstableStarref" rotation={[-Math.PI / 2, 0, 0]} scale={1}>
                  <mesh name="UnstableStarref_2_0" geometry={nodes.UnstableStarref_2_0.geometry} material={materials.material_1} />
                  {/* <sphereGeometry args={[0.5, 32, 32]} />
                  <meshStandardMaterial metalness={0.6} roughness={0.2} /> */}
                  <directionalLight args={["#ffffff", 2]} position={props.position} />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/sun/sun.glb");
